
#----------Debut de la classe----------#

class Sort:


    def __init__(self, nom, degats, type, zone, projection, cout, description):
      """ Type : self, str, int, str, ?, int, int, str -> void
          Préconditions : None
          Rôle : Initialise les attributs de la classe Sort. """

      self.nom = nom #nom donné au sort
      self.degats = degats # nombre de pv retirés par le sort
      self.type = type # attaque, soin, défense
      self.zone = zone # définit la zone sur laquelle le sort peut agir
      self.proj = projection # distance entre le joueur et la zone
      self.desc = description # description du sort

#perso = joueur
#adv = adversaire

     def action_sort(self, perso, adv):
         """ self, Personnage, Personnage ->
             Préconditions : self.pv != 0 and
             Rôle : En fonction du type du sort, lance le sort sur l'adversaire ou le joueur correspondant. """

        if self.type == attaque:
            attaque_action(self, adv)
        elif self.type == defense:
            if self.nom == "Augmentation":
                augmentation_action(self, perso)
            else:
                defense_action(self, adv)
        else:
            soin_action(self, perso)


#-----------Actions des sorts------------#

    #-----Attaque------#
    def attaque_action(self, adv):
        """ Sort, Personnage -> void
            Préconditions : perso.pv != 0
            Rôle : A l'aide d'une attaque fait perdre des points de vie à ses adversaires."""

        adv.pv = adv.pv - self.degats

    #-----Defense-----#

    def augmentation_action(self, perso):
        """ Sort, Personnage -> void
            Préconditions : perso.pv != 0
            Rôle : Augmente le nombre de pv du joueur de 5% en fonction du nombre de pv_t. """

        perso.pv_t = 1,05*perso.pv_t

    def defense_action(self, adv):
        """ Sort, Personnage -> void
            Préconditions : perso.pv != 0
            Rôle : Supprime les pd de l'adversaire."""

        if self.nom == "Eclair":
            nb = 2
        if self.nom == "Immobilisation":
            nb = adv.pd
        adv.pd = adv.pd - nb


    #------Soin------#
    def soin_action(self, perso):
        """ Sort, Personnage -> void
            Préconditions : perso.pv != 0
            Rôle : Augmente le nombre de point de vie du joueur. """
        if self.nom == "Bénédiction":
            perso.pv = perso.pv + perso.pv_t*0.2
        if self.nom == "Illumination":
            perso.pv = perso.pv + 200

#-----------Création des sorts---------#
#def __init__(self, nom, degats, type, zone, projection, cout, description):

#-----Attaque-----#
explosion = Sort("Explosion", 50, "attaque", ?, 2, 3, "Fais exploser une bombe infligeant des degats de zone.")
fleches_empoisonnees = Sort("Flèches empoisonnées", 30, "attaque", ?, 1, "Envoie 3 flèches empoisonnées sur son adversaire")

#-----Defense-----#
augmentation = Sort("Augmentation", None, "defense", ?, 0, 4, "Le joueur augmente son nombre de point de vie total pour le reste de la partie.")
eclair = Sort("Eclair", None, "defense", ?, 5, 2, "Envoie un éclair qui va restraindre son adversaire en lui enlevant des pd pour un tour.")

#-----Soin--------#
benediction = Sort("Bénédiction", None, "soin", ?, 0, 3, "Bénis le joueur en lui régénerant 30% de son nombre de point de vie total. ")
illumination = Sort("Illumination", None, "Soin", ?, 0, 1, "Soigne le joueur de 200 pv en abatant son sceptre de lumière.")
