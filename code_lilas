
#----------Debut de la classe----------#

class Sort:


    def __init__(self, nom, degats, type, zone, projection, cout, description):
      """ Type : self, str, int, str, ?, int, int, str -> void
          Préconditions : None
          Rôle : Initialise les attributs de la classe Sort. """

      self.nom = nom
      self.degats = degats # nombre de pv retirés par le sort
      self.type = type # attaque, soin, défense
      self.zone = zone # définit la zone sur laquelle le sort peut agir
      self.proj = projection # distance entre le joueur et la zone
      self.desc = description # description du sort



     def action_sort(self, perso, adversaire):
         """ self ->
             Préconditions :
             Rôle : En fonction du type du sort,  . """


        if self.type == attaque:
            adversaire.pv -= self.attaque
            return (adversaire.pv)

        elif self.type == defene:
            if self.nom ==

        else:

#-----------Actions des sorts------------#

    def benediction_action(self, perso):
        """ Sort, Personnage -> void
            Préconditions : perso.pv != 0
            Rôle : Augmente le nombre de point de vie qu'a le joueur de 30% en fonction du nombre totale de ses points de vie. """

        if perso.pv != 0:
            perso.pv = perso.pv + perso.pv_t*0.3



#-----------Création des sorts---------#
#def __init__(self, nom, degats, type, zone, projection, cout, description):

#-----Attaque-----#
explosion = Sort("Explosion", 100, "attaque", ?, 2, 4, "Fais exploser une bombe infligeant des degats de zone.") #zone et melée
fleches_empoisonnees = Sort("Flèches empoisonnées", 30, "attaque", ?, 1, "Envoie 3 flèches empoisonnées sur son adversaire.") #mono et distance
#-----Defense-----#
augmentation = Sort("Augmentation", None, "defense", ?, 0, 1, "Le joueur augmente son nombre de point de vie total pour le reste de la partie.")
impulsion = Sort("Impulsion", 40, "defense", ?, 1, 3, "Envoie une impulsion qui résonne sur le sol, inflige des dégâts sur son passage et retire un pd à son adversaire au prochain tour.") #mono et corps à corps
#-----Soin--------#
benediction = Sort("Bénédiction", None, "soin", ?, 0, 3, "Bénis le joueur en lui régénerant 30% de sa vie.")
